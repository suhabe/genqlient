{{.Doc}}
func {{.Name}}(
    {{if ne .Config.ContextType "-" -}}
    ctx {{ref .Config.ContextType}},
    {{end}}
    {{- if not .Config.ClientGetter -}}
    client {{ref "github.com/suhabe/genqlient/graphql.Client"}},
    {{end}}
    {{- if .Input -}}
    {{- range .Input.Fields -}}
    {{/* the GraphQL name here is the user-specified variable-name */ -}}
    {{.GraphQLName}} {{.GoType.Reference}},
    {{end -}}
    {{end -}}
) (*{{.ResponseName}}, {{if .Config.Extensions -}}map[string]interface{},{{end}} error) {

	resp, err := genqlient.Retry(ctx, "{{.Name}}", func() (*{{.ResponseName}},error) {

        req := &graphql.Request{
            OpName: "{{.Name}}",
            Query:  `{{.Body}}`,
        {{if .Input -}}
            Variables: &{{.Input.GoName}}{
            {{range .Input.Fields -}}
            {{.GoName}}: {{.GraphQLName}},
            {{end -}}
            },
        {{end -}}
        }

        start := time.Now()
        genqlient.LogPre(ctx, "{{.Name}}", req)

        var data {{.ResponseName}}
        resp := &graphql.Response{Data: &data}

        var err error
        {{if .Config.ClientGetter -}}
        var client graphql.Client

        client, err = {{ref .Config.ClientGetter}}({{if ne .Config.ContextType "-"}}ctx{{else}}{{end}})
        if err != nil {
            genqlient.LogPost(ctx, "{{.Name}}", req, resp, start, err)
            return nil, {{if .Config.Extensions -}}nil,{{end -}} err
        }
        {{end}}

        err = client.MakeRequest(
            {{if ne .Config.ContextType "-"}}ctx{{else}}nil{{end}},
            req,
            resp,
        )
        if err != nil {
        	genqlient.LogPost(ctx, "{{.Name}}", req, resp, start, err)
            return nil, err
        }

        genqlient.LogPost(ctx, "{{.Name}}", req, resp, start, nil)

        return &data, {{if .Config.Extensions -}}resp.Extensions,{{end -}} nil
    })

	return resp, err
}
