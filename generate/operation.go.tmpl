{{.Doc}}
func {{.Name}}(
    {{if ne .Config.ContextType "-" -}}
    ctx {{ref .Config.ContextType}},
    {{end}}
    {{- if not .Config.ClientGetter -}}
    client {{ref "github.com/suhabe/genqlient/graphql.Client"}},
    {{end}}
    {{- if .Input -}}
    {{- range .Input.Fields -}}
    {{/* the GraphQL name here is the user-specified variable-name */ -}}
    {{.GraphQLName}} {{.GoType.Reference}},
    {{end -}}
    {{end -}}
) (*{{.ResponseName}}, {{if .Config.Extensions -}}map[string]interface{},{{end}} error) {
    req := &graphql.Request{
        OpName: "{{.Name}}",
        Query:  `{{.Body}}`,
    {{if .Input -}}
        Variables: &{{.Input.GoName}}{
        {{range .Input.Fields -}}
        {{.GoName}}: {{.GraphQLName}},
        {{end -}}
        },
    {{end -}}
    }
    var err error
    {{if .Config.ClientGetter -}}
    var client graphql.Client

    client, err = {{ref .Config.ClientGetter}}({{if ne .Config.ContextType "-"}}ctx{{else}}{{end}})
    if err != nil {
        return nil, {{if .Config.Extensions -}}nil,{{end -}} err
    }
    {{end}}

    {{if .Config.LogTiming -}}
    if logTiming := ctx.Value(n.Auth0NamespaceContextVar); logTiming != nil {
    start := time.Now()
    requestPayload, err := json.Marshal(req.Variables)
    if err != nil {
        return nil, err
    }
    marshalTime := time.Since(start)
    defer func() {
        fmt.Printf("[%v] %s (%d bytes) took %v (%v marshaling)\n", time.Now().Format("2006-01-02 15:04:05Z07:00"), "{{.Name}}", len(requestPayload), time.Since(start), marshalTime)
    }()
    {{end -}}

    var data {{.ResponseName}}
    resp := &graphql.Response{Data: &data}

    genqlient.Retry(func() error {
        return client.MakeRequest(
            {{if ne .Config.ContextType "-"}}ctx{{else}}nil{{end}},
            req,
            resp,
        )
    }, 8)

    return &data, {{if .Config.Extensions -}}resp.Extensions,{{end -}} err
}
